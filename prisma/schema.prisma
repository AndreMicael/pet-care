// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              String @id @default(cuid())
  name            String 
  title           String
  avatar          String?
  email           String @unique
  phone           String
  address         String
  careFriend      Boolean @default(false)
  rating          Float? @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relacionamentos
  pets            Pet[]
  reservationsAsOwner    Reservation[] @relation("PetOwner")
  reservationsAsSitter   Reservation[] @relation("PetSitter")
}

model Pet {
  id              String @id @default(cuid())
  name            String
  kind            String
  breed           String?
  age             Int?
  comorbidity     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relacionamentos
  ownerId         String
  owner           User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  reservations    ReservationPet[]
}

model Reservation {
  id              String @id @default(cuid())
  startDate       DateTime
  endDate         DateTime
  status          ReservationStatus @default(PENDING)
  totalPrice      Float
  observations    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relacionamentos
  ownerId         String
  owner           User @relation("PetOwner", fields: [ownerId], references: [id])
  sitterId        String
  sitter          User @relation("PetSitter", fields: [sitterId], references: [id])
  serviceId       String
  service         Service @relation(fields: [serviceId], references: [id])
  pets            ReservationPet[]
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Service {
  id              String @id @default(cuid())
  name            String
  description     String?
  price           Float
  duration        Int // em minutos
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relacionamentos
  serviceTypeId   String
  serviceType     ServiceType @relation(fields: [serviceTypeId], references: [id])
  reservations    Reservation[]
}

// Tabela de junção para Pet-Reservation
model ReservationPet {
  reservationId   String
  reservation     Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  petId           String
  pet             Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  @@id([reservationId, petId])
}

model ServiceType {
  id              String @id @default(cuid())
  name            String @unique
  description     String?
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relacionamentos
  services        Service[]
}